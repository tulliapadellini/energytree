% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{plot.constparty}
\alias{plot.constparty}
\title{Visualization of Energy Trees}
\usage{
\method{plot}{constparty}(
  x,
  main = NULL,
  terminal_panel = NULL,
  tp_args = list(),
  inner_panel = node_inner,
  ip_args = list(),
  edge_panel = edge_simple,
  ep_args = list(),
  type = c("extended", "simple"),
  drop_terminal = NULL,
  tnex = NULL,
  newpage = TRUE,
  pop = TRUE,
  gp = gpar(),
  ...
)
}
\arguments{
\item{x}{an object of class \code{party} or \code{constparty}.}

\item{main}{an optional title for the plot.}

\item{terminal_panel}{an optional panel function of the form \code{function(node)} plotting the terminal nodes. Alternatively, a panel generating function of class "\code{grapcon_generator}" that is called with arguments \code{x} and \code{tp_args} to set up a panel function. By default, an appropriate panel function is chosen depending on the scale of the dependent variable.}

\item{tp_args}{a list of arguments passed to \code{terminal_panel} if this is a "\code{grapcon_generator}" object.}

\item{inner_panel}{an optional panel function of the form \code{function(node)} plotting the inner nodes. Alternatively, a panel generating function of class "\code{grapcon_generator}" that is called with arguments \code{x} and \code{ip_args} to set up a panel function.}

\item{ip_args}{a list of arguments passed to \code{inner_panel} if this is a "\code{grapcon_generator}" object.}

\item{edge_panel}{an optional panel function of the form \code{function(split, ordered = FALSE, left = TRUE)} plotting the edges. Alternatively, a panel generating function of class "\code{grapcon_generator}" that is called with arguments \code{x} and \code{ep_args} to set up a panel function.}

\item{ep_args}{a list of arguments passed to \code{edge_panel} if this is a "\code{grapcon_generator}" object.}

\item{type}{a character specifying the complexity of the plot: \code{extended} tries to visualize the distribution of the response variable in each terminal node whereas \code{simple} only gives some summary information.}

\item{drop_terminal}{a logical indicating whether all terminal nodes should be plotted at the bottom.}

\item{tnex}{a numeric value giving the terminal node extension in relation to the inner nodes.}

\item{newpage}{a logical indicating whether \code{grid.newpage()} should be called.}

\item{pop}{a logical whether the viewport tree should be popped before return.}

\item{gp}{graphical parameters.}

\item{...}{additional arguments.}
}
\description{
\code{plot} method for \code{party} objects with extended facilities for plugging in panel functions.
}
\examples{
## returns 3

}
